using System;
using System.Linq;
using JsonKnownTypes.Exceptions;
using JsonKnownTypes.Utils;

namespace JsonKnownTypes
{
    public static class JsonKnownTypesSettingsManager
    {
        public static JsonDiscriminatorSettings DefaultDiscriminatorSettings { get; set; } = new JsonDiscriminatorSettings();
        
        public static JsonKnownTypesSettings GetSettings<T>()
        {
            var discriminatorAttribute = AttributesManager.GetJsonDiscriminatorAttribute(typeof(T));
            
            var discriminatorSettings = discriminatorAttribute == null ? DefaultDiscriminatorSettings : Mapper.Map(discriminatorAttribute);
            
            var typeSettings = new JsonKnownTypesSettings
            {
                Name = discriminatorSettings.Name
            };

            var allTypes = GetAllInheritance<T>();

            typeSettings.TypeToDiscriminator.AddJsonKnown<T>();
            typeSettings.TypeToDiscriminator.AddJsonKnownThis(allTypes);
            
            if (discriminatorSettings.AutoJsonKnown)
            {
                typeSettings.TypeToDiscriminator.AddAutoGenerated(allTypes);
            }
            else if(!allTypes.All(typeSettings.TypeToDiscriminator.ContainsKey))
            {
                var missingTypes = allTypes.Where(x => !typeSettings.TypeToDiscriminator.ContainsKey(x)).Select(x => x.Name);
                throw new JsonKnownTypesException($"Dictionary does not contain all classes of hierarchy for type: {nameof(T)}, enable AutoJsonKnow or add attributes for all classes.\r\n" +
                                                  $" Missing classes {string.Join(", ", missingTypes)}"); //todo
            }

            typeSettings.DiscriminatorToType = typeSettings.TypeToDiscriminator.Revert();

            return typeSettings;
        }

        private static Type[] GetAllInheritance<T>()
        {
            var type = typeof(T);
            return type.Assembly
                .GetTypes()
                .Where(x => type.IsAssignableFrom(x) && !x.IsInterface && !x.IsAbstract)
                .ToArray();
        }
    }
}
